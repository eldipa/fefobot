#!/usr/bin/env python3
import sys, os, os.path

import json, collections

# repo - last_commit_hash - filename - line_start - line_end
github_permalink_template = "https://github.com/Taller-de-Programacion-TPs/{}/blob/{}/{}#L{}-L{}"

def read_issues(filename, mode):
    if mode == 'serialize':
        def p(*args, **kargs):
            print(*args, **kargs)
    else:
        def p(*args, **kargs):
            pass

    issue_cnt = 0
    with open(filename, 'r') as f:
        main_dict = json.load(f)
        for k in list(main_dict.keys()):
            if main_dict[k].startswith("ERROR:"):
                p(f"!!! Error found from Joern for the issue type '{k}': {main_dict[k]}")
                del main_dict[k]
            else:
                # values are json themselves
                main_dict[k] = json.loads(main_dict[k])
                p(f"Issue type '{k}': {len(main_dict[k])} issues")
                issue_cnt += len(main_dict[k])

        p(f"Found {issue_cnt} issues in total")
        return main_dict

class IssueProcessor:
    def __init__(self, process_method_prefix, src_lineno_offset):
        self.process_method_prefix = process_method_prefix
        self.src_lineno_offset = src_lineno_offset

    def pick_up_to(self, cnt, occurrences):
        orig_cnt = len(occurrences)
        more = orig_cnt > cnt
        occurrences = occurrences[:cnt]

        return occurrences, more, orig_cnt

    def filename_of(self, occurrence):
        filename = occurrence['method']['filename']
        if filename.endswith(".h.cpp"):
            filename = filename[:-4] # strip ".cpp"

        return filename

    def single_lineno_of(self, obj):
        return (obj['lineNumber'] - self.src_lineno_offset, obj['lineNumber'] - self.src_lineno_offset)

    def range_lineno_of(self, obj):
        return (obj['lineNumber'] - self.src_lineno_offset, obj['lineNumberEnd'] - self.src_lineno_offset)

    def lineno_of(self, obj):
        if 'lineNumberEnd' in obj:
            return self.range_lineno_of(obj)
        else:
            return self.single_lineno_of(obj)

    def close(self):
        raise NotImplementedError()

    def process_issue_fallback(self, issue_code_name, occurrences):
        raise Exception(f"Issue code name '{issue_code_name}' has no a {self.process_method_prefix} method associated.")

    def process_issue(self, issue_code_name, occurrences):
        cmd = f'{self.process_method_prefix}_{issue_code_name}'

        method = getattr(self, cmd, None)
        if method == None:
            self.process_issue_fallback(issue_code_name, occurrences)
        else:
            if occurrences:
                method(occurrences)

class IssueFormatter(IssueProcessor):
    def __init__(self, repo_name, last_commit_hash, src_lineno_offset, output_filename):
        IssueProcessor.__init__(self, 'format', src_lineno_offset)
        self.repo_name = repo_name
        self.last_commit_hash = last_commit_hash

        self.out_chunks = []

        self.output_filename = output_filename


    def format_mixingLogic(self, occurrences):
        self.write_title("Mezcla lógica del juego (app) con protocolo")
        self.write_desc("El código q tiene lógica del juego debe de estar separado del código del protocolo/sockets en clases distintas.")

        mix_within_single_method_occurences = []
        app_logic_occurrence_by_filename = collections.defaultdict(list)
        protocol_logic_occurrence_by_filename = collections.defaultdict(list)
        for occurrence in occurrences:
            if occurrence['hasAppLogic'] and occurrence['hasProtocolSocketLogic']:
                mix_within_single_method_occurences.append(occurrence)
            else:
                assert occurrence['hasAppLogic'] or occurrence['hasProtocolSocketLogic']
                filename = self.filename_of(occurrence)
                if occurrence['hasAppLogic']:
                    app_logic_occurrence_by_filename[filename].append(occurrence)
                else:
                    protocol_logic_occurrence_by_filename[filename].append(occurrence)

        for occurrence in mix_within_single_method_occurences:
            filename = self.filename_of(occurrence)

            # Show only the line that contains the bogus parameter
            lineno_start, lineno_end = self.range_lineno_of(occurrence['method'])
            self.write_permalink(filename, lineno_start, lineno_end)

        for filename in app_logic_occurrence_by_filename.keys():
            for occurrence in app_logic_occurrence_by_filename[filename]:
                lineno_start, lineno_end = self.range_lineno_of(occurrence['method'])
                self.write_permalink(filename, lineno_start, lineno_end)

            for occurrence in protocol_logic_occurrence_by_filename[filename]:
                lineno_start, lineno_end = self.range_lineno_of(occurrence['method'])
                self.write_permalink(filename, lineno_start, lineno_end)

            # format just one
            break

        # TODO pick_up_to (chosing different files)

    def format_maybeMisuseSendRecv(self, occurrences):
        self._format_issue(
                "Uso de send/recv",
                "No es que usar `send`/`recv` este mal, solo estate atento ha estar codeando los loops correctamente.",
                True,
                occurrences,
                4,
                'call',
                single_line=True
                )

    def format_cFuncCalls(self, occurrences):
        self._format_issue(
                "Uso de funciones de C",
                "No deberías estar necesitando usar funciones de C, la lib estandar de C++ es mucho más rica.",
                True,
                occurrences,
                4,
                'call',
                single_line=True
                )


    def format_cAllocCalls(self, occurrences):
        self._format_issue(
                "Manejo de memoria a la C",
                "No uses estas funciones de C, en cambio usa los objetos RAII de C++ (como `std::vector`) o, en última instancia, los operadores `new` y `delete`.",
                True,
                occurrences,
                4,
                'call',
                single_line=True
                )

    def format_possibleEndiannessHandlingByHandCalls(self, occurrences):
        self._format_issue(
                "Manejo del endianness a mano",
                "Podes usar las funciones para el endianness mostradas en clase, no hace falta el manejo de bytes a mano.",
                True,
                occurrences,
                4,
                'call',
                single_line=True
                )


    def format_libErrorThrowCalls(self, occurrences):
        self._format_issue(
                "Excepcion incorrecta",
                "`LibError` es para errores del sistema o de la stdlib q tenga un `errno` valido. Posiblemente quieras usar otro tipo de excepcion como `std::runtime_error`.",
                True,
                occurrences,
                2,
                'call',
                single_line=True
                )

    def format_comparePossiblyStringCalls(self, occurrences):
        self._format_issue(
                "Usar operador ==",
                "",
                True,
                occurrences,
                2,
                'call',
                single_line=True
                )

    def format_globalVariables(self, occurrences):
        self._format_issue(
                "Variables globales",
                "No deberías necesitar usar variables globales.",
                True,
                occurrences,
                4,
                'local',
                single_line=True
                )

    def format_maybeUnneededPassByPtr(self, occurrences):
        self._format_issue(
                "Pasaje por puntero",
                "Estas pasando por puntero pero posiblemente podrías pasar por referencia usando `&`",
                True,
                occurrences,
                8,
                'parameter',
                single_line=True
                )


    def format_passByValueNonTrivialObjects(self, occurrences):
        self._format_issue(
                "Pasaje por copia",
                "Estas pasando por copia lo q es ineficiente: pasar por move semantics o por referencia usando `&`",
                True,
                occurrences,
                8,
                'parameter',
                single_line=True
                )

    def format_globalFunctions(self, occurrences):
        self._format_issue(
                "Funciones globales",
                "Funciones globales no están permitidas, encapsular la lógica en clases.",
                True,
                occurrences,
                2,
                'method',
                single_line=True
                )


    def format_stackBufferAllocated(self, occurrences):
        self._format_issue(
                "Buffers",
                "No deberias necesitar de usar buffers.",
                True,
                occurrences,
                4,
                'local',
                single_line=True
                )

    def format_vectorBufferAllocated(self, occurrences):
        self._format_issue(
                "Buffers",
                "No deberias necesitar de usar buffers.",
                True,
                occurrences,
                4,
                'call',
                single_line=True
                )



    def format_longMethods(self, occurrences):
        self._format_issue(
                "Métodos muy largos",
                "Refactorizar, código muy largo es difícil de entender.",
                True,
                occurrences,
                2,
                'method',
                single_line=False
                )

    def format_tooManyNestedLoopsMethods(self, occurrences):
        self._format_issue(
                "Mucha anidación",
                "Refactorizar, código con muchos `if`/`while`/`for` anidados es difícil de entender.",
                True,
                occurrences,
                2,
                'method',
                single_line=False
                )

    def format_switchWithoutDefaultMethods(self, occurrences):
        self._format_issue(
                "Te falta poner un default",
                "En los switch, si sabes q hay valores q no deberian aparecer, poner un default que los atrape y lanzar un error",
                True,
                occurrences,
                2,
                'method',
                single_line=False
                )

    def format_lockCalls(self, occurrences):
        self._format_issue(
                "Deberias usar unique_lock o lock_guard",
                "Llamar explicitamente a lock() de un mutex es peligroso por q te obligas a no olvidarte de llamar al unlock(). Preferi usar RAII.",
                True,
                occurrences,
                2,
                'method',
                single_line=True
                )

    def format_moreThanOneMutex(self, occurrences):
        self._format_issue(
                "Parece haber mas de un mutex/monitor, este TP lo necesita?",
                "",
                True,
                occurrences,
                2,
                'method',
                single_line=True
                )

    def format_stdThreadUsed(self, occurrences):
        self._format_issue(
                "Parece que estas usando std::thread en vez de la clase Thread.",
                "",
                True,
                occurrences,
                2,
                'method',
                single_line=True
                )

    if False:
        def format_possibleLowLevelProtocolMethods(self, occurrences):
            self._format_issue(
                    "Se expone demansiado detalle",
                    "La interfaz publica de la(s) clases Protocol deben exponer publicamente metodos de alto nivel q hablen en terminos del juego.",
                    True,
                    occurrences,
                    2,
                    'method',
                    single_line=False
                    )


    def _format_issue(self, title, desc, hint_more, occurrences, pick_up_cnt, obj_name, single_line):
        '''
        Format the issue showing a permalink to the 1 line code.
        The source code file is taken from occurrences['method']; the line number
        is taken from occurrences[obj_name].
        '''
        assert obj_name in ['method', 'parameter', 'call', 'local']
        occurrences, more, _ = self.pick_up_to(pick_up_cnt, occurrences)

        self.write_title(title)
        self.write_desc(desc)

        for occurrence in occurrences:
            filename = self.filename_of(occurrence)

            if single_line:
                lineno_start, lineno_end = self.single_lineno_of(occurrence[obj_name])
            else:
                lineno_start, lineno_end = self.range_lineno_of(occurrence[obj_name])

            self.write_permalink(filename, lineno_start, lineno_end)

        if more and hint_more:
            self.write_desc("Puede que haya más casos en tu código.")

    def write_title(self, title):
        self.out_chunks.append(f"### {title}")

    def write_desc(self, desc):
        self.out_chunks.append(desc)

    def write_permalink(self, filename, start, end):
        self.out_chunks.append(github_permalink_template.format(
            self.repo_name,
            self.last_commit_hash,
            filename,
            start,
            end
        ))

    def write_reviewer_user(self, reviewer):
        self.out_chunks.append(f"**Corrector:** @{reviewer}")

    def close(self):
        if reviewer:
            self.write_reviewer_user(reviewer)
        with open(f"{self.output_filename}.md", 'w') as f:
            for chunk in self.out_chunks:
                f.write(chunk)
                f.write("\n")

        self.out_chunks = None # make sure nobody use this again


class IssueAnnotator(IssueProcessor):
    def __init__(self, issue_file, src_lineno_offset, to_annotate_repo_path):
        IssueProcessor.__init__(self, 'annotate', src_lineno_offset)
        self.issue_file = issue_file
        self.to_annotate_repo_path = to_annotate_repo_path

        self.annotation_chunks_by_filename = {}

    def _annotate_issue(self, title, occurrences, pick_up_cnt, obj_name):
        pick_up_cnt = 1000 # TODO
        assert obj_name in ['method', 'parameter', 'call', 'local']
        occurrences, more, _ = self.pick_up_to(pick_up_cnt, occurrences)

        for occurrence in occurrences:
            filename = self.filename_of(occurrence)
            issue_id = int(occurrence['issue_id'])

            lineno_start, _ = self.single_lineno_of(occurrence[obj_name])
            self.annotate_issue(filename, lineno_start, issue_id, title)

    def annotate_issue(self, filename, start, issue_id, title):
        if filename in self.annotation_chunks_by_filename:
            self.annotation_chunks_by_filename[filename].append((start, issue_id, title))
        else:
            self.annotation_chunks_by_filename[filename] = [(start, issue_id, title)]

    def close(self):
        for filename, annotations in self.annotation_chunks_by_filename.items():
            annotations.sort(reverse=True)
            full_fname = os.path.join(self.to_annotate_repo_path, filename)

            print(f"Annotating {full_fname}...")
            with open(full_fname, 'rt') as f:
                lines = list(f)

            for lineno, issue_id, msg in annotations:
                assert lineno >= 1
                lines.insert(lineno - 1, f'\n/* XXX fefobot-annotation:{issue_id} {msg} */\n')

            with open(full_fname, 'wt') as f:
                f.write(''.join(lines))

        self.annotation_chunks_by_filename = None # make sure nobody use this again

    def process_issue_fallback(self, issue_code_name, occurrences):
        pass


    def annotate_mixingLogic(self, occurrences):
        pass # Not supported

    def annotate_maybeMisuseSendRecv(self, occurrences):
        self._annotate_issue(
                "Esta bien esto?",
                occurrences,
                4,
                'call',
                )

    def annotate_cFuncCalls(self, occurrences):
        self._annotate_issue(
                "No deberias necesitar usar funciones de C",
                occurrences,
                4,
                'call',
                )


    def annotate_cAllocCalls(self, occurrences):
        self._annotate_issue(
                "Usar C++y no C",
                occurrences,
                4,
                'call',
                )

    def annotate_possibleEndiannessHandlingByHandCalls(self, occurrences):
        self._annotate_issue(
                "Manejo del endianness a mano",
                occurrences,
                4,
                'call',
                )


    def annotate_libErrorThrowCalls(self, occurrences):
        self._annotate_issue(
                "Excepcion incorrecta",
                occurrences,
                2,
                'call',
                )

    def annotate_comparePossiblyStringCalls(self, occurrences):
        self._annotate_issue(
                "Usar ==",
                occurrences,
                2,
                'call',
                )

    def annotate_globalVariables(self, occurrences):
        self._annotate_issue(
                "Variables globales",
                occurrences,
                4,
                'local',
                )

    def annotate_maybeUnneededPassByPtr(self, occurrences):
        self._annotate_issue(
                "Pasaje por puntero",
                occurrences,
                8,
                'parameter',
                )


    def annotate_passByValueNonTrivialObjects(self, occurrences):
        self._annotate_issue(
                "Pasaje por copia",
                occurrences,
                8,
                'parameter',
                )

    def annotate_globalFunctions(self, occurrences):
        self._annotate_issue(
                "Funciones globales",
                occurrences,
                2,
                'method',
                )


    def annotate_stackBufferAllocated(self, occurrences):
        self._annotate_issue(
                "Estas seguro q este buffer es necesario?",
                occurrences,
                4,
                'local',
                )

    def annotate_vectorBufferAllocated(self, occurrences):
        self._annotate_issue(
                "Estas seguro q este buffer es necesario?",
                occurrences,
                4,
                'call',
                )


    def annotate_longMethods(self, occurrences):
        self._annotate_issue(
                "Método muy largo",
                occurrences,
                2,
                'method',
                )

    def annotate_tooManyNestedLoopsMethods(self, occurrences):
        self._annotate_issue(
                "Mucha anidación",
                occurrences,
                2,
                'method',
                )

    def annotate_switchWithoutDefaultMethods(self, occurrences):
        self._annotate_issue(
                "Poner un default en el switch q lanze un error",
                occurrences,
                2,
                'method',
                )

    if False:
        def annotate_possibleLowLevelProtocolMethods(self, occurrences):
            self._annotate_issue(
                    "Se expone demansiado detalle",
                    occurrences,
                    2,
                    'method',
                    )

class IssueSerializer(IssueProcessor):
    def __init__(self, repo_name, src_lineno_offset, output_filename):
        IssueProcessor.__init__(self, 'serialize', src_lineno_offset)
        self.repo_name = repo_name

        self.issues_tracked = []

        self.output_filename = output_filename

    def close(self):
        self.issues_tracked.sort()
        with open(f"{self.output_filename}.test_results.md", 'w') as f:
            for filename, issue_code_name, lineno_start, lineno_end, snippet in self.issues_tracked:
                msg = f'### {self.repo_name} - {filename} - {issue_code_name} - {lineno_start}:{lineno_end}\n'
                f.write(msg)

                msg = f'```cpp\n{snippet}\n```\n'
                f.write(msg)

        self.issues_tracked = None # make sure nobody use this again


    def process_issue_fallback(self, issue_code_name, occurrences):
        for occurrence in occurrences:
            filename = self.filename_of(occurrence)

            for try_obj_name in ('method', 'call', 'local', 'parameter'):
                if try_obj_name in occurrence:
                    obj_name = try_obj_name
                    break
            else:
                raise Exception(f"No valid object in the issue-occurrence '{occurrence}'")

            lineno_start, lineno_end = self.lineno_of(occurrence[obj_name])
            snippet = self.get_snippet(filename, lineno_start, lineno_end)
            self.issues_tracked.append((filename, issue_code_name, lineno_start, lineno_end, snippet))

    def get_snippet(self, filename, lineno_start, lineno_end):
        # Note: issue_processor in 'serialize' mode works with the 'joern' version of the repository
        # (aka 'repo_name').
        #
        # This means that the filename and the line numbers needs to be changed to work with
        # the modified repo (the orignal values work for the original git repo, hence the need of the change)

        if filename.endswith('.h'):
            filename += '.cpp'

        lineno_start += self.src_lineno_offset
        lineno_end += self.src_lineno_offset

        full_fname = os.path.join(self.repo_name, filename)
        with open(full_fname, 'rt') as f:
            lines = list(f)

        return ''.join(lines[lineno_start - 1 : lineno_end])


def usage():
    print(f"Usage: {sys.argv[0]} 'format' <issue_file_path>  <repo_name> <last_commit_hash> <src_lineno_offset>", file=sys.stderr)
    print(f"Usage: {sys.argv[0]} 'annotate' <issue_file_path> <to_annotate_repo_path> <src_lineno_offset>", file=sys.stderr)
    print(f"Usage: {sys.argv[0]} 'serialize' <issue_file_path>  <repo_name> <src_lineno_offset>", file=sys.stderr)

if __name__ == '__main__':
    if len(sys.argv) <= 2:
        usage()
        exit(1)

    operation_mode = sys.argv[1]
    if operation_mode not in ('format', 'annotate', 'serialize'):
        usage()
        exit(1)

    blocked = set()
    blockfile = os.getenv("FEFOBOT_BLOCKFILE", None)
    if blockfile:
        if not os.path.exists(blockfile):
            print(f"Blockfile '{blockfile}' does not exist (FEFOBOT_BLOCKFILE env var). Bad file path?")
            exit(1)

        blocked = set(line.strip() for line in open(blockfile, 'rt') if line.strip() and not line.strip().startswith('#'))

    if operation_mode == 'format':
        try:
            issue_file = sys.argv[2]
            repo_name = sys.argv[3]
            last_commit_hash = sys.argv[4]
            src_lineno_offset = int(sys.argv[5])
            reviewer = sys.argv[6].strip()
            assert len(sys.argv) == 7
        except:
            usage()
            exit(1)

        proc = IssueFormatter(repo_name, last_commit_hash, src_lineno_offset, issue_file.replace(".json", ""))

    elif operation_mode == 'annotate':
        try:
            issue_file = sys.argv[2]
            public_git_repo= sys.argv[3]
            src_lineno_offset = int(sys.argv[4])
            assert len(sys.argv) == 5
        except:
            usage()
            exit(1)

        proc = IssueAnnotator(issue_file, src_lineno_offset, public_git_repo)

    elif operation_mode == 'serialize':
        try:
            issue_file = sys.argv[2]
            repo_name = sys.argv[3]
            src_lineno_offset = int(sys.argv[4])
            assert len(sys.argv) == 5
        except:
            usage()
            exit(1)

        proc = IssueSerializer(repo_name, src_lineno_offset, issue_file.replace(".json", ""))

    # assign an unique id to each issue
    issue_id = 0
    issues = read_issues(issue_file, operation_mode)
    for issue_name, occurrences in issues.items():
        for occurrence in occurrences:
            occurrence["issue_id"] = issue_id
            issue_id += 1

    for issue_name, occurrences in issues.items():
        if issue_name in blocked:
            continue

        proc.process_issue(issue_name, occurrences)

    proc.close()
